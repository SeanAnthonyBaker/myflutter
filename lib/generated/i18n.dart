import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "Flutter Rocks"
  String get title => "Flutter Rocks";
  /// "Hello ${name}"
  String greetTo(String name) => "Hello ${name}";
  /// "Home"
  String get homeTitle => "Home";
  /// "Settings"
  String get settingsTitle => "Settings";
  /// "Contacts"
  String get contactsTitle => "Contacts";
  /// "Details"
  String get contactsDetails => "Details";
  /// "Name"
  String get contactsName => "Name";
  /// "Email"
  String get contactsEmail => "Email";
  /// "No Contact Selected"
  String get contactsEmpty => "No Contact Selected";
  /// "About"
  String get aboutTitle => "About";
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_es_US extends I18n {
  const _I18n_es_US();

  /// "Aleteo de rocas"
  @override
  String get title => "Aleteo de rocas";
  /// "Hola ${name}"
  @override
  String greetTo(String name) => "Hola ${name}";
  /// "Casa"
  @override
  String get homeTitle => "Casa";
  /// "Configuraciones"
  @override
  String get settingsTitle => "Configuraciones";
  /// "Contactos"
  @override
  String get contactsTitle => "Contactos";
  /// "Detalles"
  @override
  String get contactsDetails => "Detalles";
  /// "Nombre"
  @override
  String get contactsName => "Nombre";
  /// "Correo electrónico"
  @override
  String get contactsEmail => "Correo electrónico";
  /// "Ningún contacto seleccionado"
  @override
  String get contactsEmpty => "Ningún contacto seleccionado";
  /// "Acerca de"
  @override
  String get aboutTitle => "Acerca de";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_ja_JP extends I18n {
  const _I18n_ja_JP();

  /// "フラッターロックス"
  @override
  String get title => "フラッターロックス";
  /// "${name}様"
  @override
  String greetTo(String name) => "${name}様";
  /// "ホーム"
  @override
  String get homeTitle => "ホーム";
  /// "設定"
  @override
  String get settingsTitle => "設定";
  /// "連絡先"
  @override
  String get contactsTitle => "連絡先";
  /// "細部"
  @override
  String get contactsDetails => "細部";
  /// "名前"
  @override
  String get contactsName => "名前";
  /// "Eメール"
  @override
  String get contactsEmail => "Eメール";
  /// "連絡先が選択されていません"
  @override
  String get contactsEmpty => "連絡先が選択されていません";
  /// "約"
  @override
  String get aboutTitle => "約";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_fr_FR extends I18n {
  const _I18n_fr_FR();

  /// "Roches flottantes"
  @override
  String get title => "Roches flottantes";
  /// "Bonjour ${name}"
  @override
  String greetTo(String name) => "Bonjour ${name}";
  /// "Accueil"
  @override
  String get homeTitle => "Accueil";
  /// "Réglages"
  @override
  String get settingsTitle => "Réglages";
  /// "Contacts"
  @override
  String get contactsTitle => "Contacts";
  /// "Détails"
  @override
  String get contactsDetails => "Détails";
  /// "Nom"
  @override
  String get contactsName => "Nom";
  /// "Email"
  @override
  String get contactsEmail => "Email";
  /// "Aucun contact sélectionné"
  @override
  String get contactsEmpty => "Aucun contact sélectionné";
  /// "À propos de"
  @override
  String get aboutTitle => "À propos de";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_zh_CH extends I18n {
  const _I18n_zh_CH();

  /// "颤动的岩石"
  @override
  String get title => "颤动的岩石";
  /// "您好${name}"
  @override
  String greetTo(String name) => "您好${name}";
  /// "家"
  @override
  String get homeTitle => "家";
  /// "设定值"
  @override
  String get settingsTitle => "设定值";
  /// "联络人"
  @override
  String get contactsTitle => "联络人";
  /// "细节"
  @override
  String get contactsDetails => "细节";
  /// "名称"
  @override
  String get contactsName => "名称";
  /// "电子邮件"
  @override
  String get contactsEmail => "电子邮件";
  /// "未选择联系人"
  @override
  String get contactsEmpty => "未选择联系人";
  /// "关于"
  @override
  String get aboutTitle => "关于";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_ru_RU extends I18n {
  const _I18n_ru_RU();

  /// "Порхающие скалы"
  @override
  String get title => "Порхающие скалы";
  /// "Здравствуйте, ${name}"
  @override
  String greetTo(String name) => "Здравствуйте, ${name}";
  /// "Домой"
  @override
  String get homeTitle => "Домой";
  /// "настройки"
  @override
  String get settingsTitle => "настройки";
  /// "контакты"
  @override
  String get contactsTitle => "контакты";
  /// "подробности"
  @override
  String get contactsDetails => "подробности";
  /// "имя"
  @override
  String get contactsName => "имя";
  /// "Электронное письмо"
  @override
  String get contactsEmail => "Электронное письмо";
  /// "Контакт не выбран"
  @override
  String get contactsEmpty => "Контакт не выбран";
  /// "Около"
  @override
  String get aboutTitle => "Около";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", "US"),
      Locale("es", "US"),
      Locale("ja", "JP"),
      Locale("fr", "FR"),
      Locale("zh", "CH"),
      Locale("ru", "RU")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("es_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_es_US());
    }
    else if ("ja_JP" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_ja_JP());
    }
    else if ("fr_FR" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_fr_FR());
    }
    else if ("zh_CH" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_CH());
    }
    else if ("ru_RU" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_ru_RU());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("es" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_es_US());
    }
    else if ("ja" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_ja_JP());
    }
    else if ("fr" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_fr_FR());
    }
    else if ("zh" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_CH());
    }
    else if ("ru" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_ru_RU());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}